{"version":3,"sources":["stylesheets/logo.png","components/Home.js","components/Download.js","components/Navbar.js","components/Footer.js","stylesheets/error-404.svg","components/NotFound.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","process","frontURL","Home","dropRef","useRef","submitBtn","finalLinkRef","previewImgRef","shareBtnRef","homeRef","firstRender","useState","errorMsg","setErrorMsg","file","setFile","previewSrc","setPreviewSrc","isPreviewAvailable","setIsPreviewAvailable","uploadedFile","setUploadedFile","progress","setProgress","displayProgress","setDisplayProgress","displayLinks","setDisplayLinks","useEffect","current","style","opacity","window","setTimeout","name","minHeight","border","background","color","visibility","updateBorder","dragState","ref","className","onSubmit","e","preventDefault","formdata","FormData","append","axios","post","headers","then","get","data","_id","catch","err","console","log","response","onDrop","files","fileReader","FileReader","onload","result","readAsDataURL","match","onDragEnter","onDragLeave","getRootProps","getInputProps","fontWeight","src","alt","width","type","logo","onClick","download","Uint8Array","from","Body","buffer","file_name","file_mimetype","navigator","clipboard","writeText","toolTip","document","querySelector","aria-label","Download","props","id","params","downloadFile","location","replace","message","alert","JSON","stringify","Navbar","to","Footer","href","target","rel","title","NotFound","error404","About","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4b6456a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a6803a72.png\";","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Dropzone from \"react-dropzone\"; // package to handle file drag-and-drop\r\nimport axios from \"axios\";\r\nimport download from \"downloadjs\"; // package to trigger file download\r\nimport logo from \"../stylesheets/logo.png\";\r\nimport \"../stylesheets/home.css\";\r\n\r\n// set the base URL as the localhost or the deployed URL\r\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\r\nlet frontURL = \"\";\r\nif (baseURL === \"http://localhost:5000\") {\r\n    frontURL = \"http://localhost:3000\";\r\n}\r\n\r\n// Home Page's component\r\nconst Home = () => {\r\n    // Set the opacity to 1 after component mounting\r\n\r\n    // Refs to handle the UI of the page\r\n    const dropRef = useRef(null); // Drag-and-drop component's reference\r\n    const submitBtn = useRef(null); // Submit button's reference\r\n    const finalLinkRef = useRef(null); // Reference to the links displayed after file upload is done successfully\r\n    const previewImgRef = useRef(null); // Reference to the preview image component\r\n    const shareBtnRef = useRef(null); // Reference to the button that copies shareable link to the clipboard, after successful file upload\r\n    const homeRef = useRef(null);\r\n    const firstRender = useRef(true); // Reference to prevent a useEffect block from executing on componentDidMount/first render\r\n\r\n    // All the state variables\r\n    const [errorMsg, setErrorMsg] = useState(\"\"); // To store any error message in the file upload process\r\n    const [file, setFile] = useState({}); // To store the file object after the drag-and-drop event occurs\r\n    const [previewSrc, setPreviewSrc] = useState(\"\"); // To store the image to be previewed after file upload\r\n    const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // To set a boolean variable to check if preview is available or not\r\n    const [uploadedFile, setUploadedFile] = useState({}); // To store the File object returned after POST request is made to the server\r\n    const [progress, setProgress] = useState(0); // To set the progress bar's width/percentage\r\n    const [displayProgress, setDisplayProgress] = useState(false); // Bolean variable to display the progress bar during file upload process\r\n    const [displayLinks, setDisplayLinks] = useState(false); // Boolean var to display the links (to download/copy shareable link) after successful file upload\r\n\r\n    useEffect(() => {\r\n        homeRef.current.style.opacity = \"1\";\r\n    }, []);\r\n\r\n    // UseEffect to handle how the progress bar works\r\n    useEffect(() => {\r\n        // To display the progress bar's percentage being increased gradually, during the file upload process\r\n        if (progress < 100 && displayProgress) {\r\n            // A setTimeout is used to avoid the 'progress' state var being changes too many times, and crashing the app because the max call-stack of react render is reached\r\n            window.setTimeout(() => {\r\n                setProgress(progress + 2);\r\n            }, 100);\r\n        }\r\n        // If the progress bar is about to reach 100% but the file upload has returned the uploadedFile object\r\n        else if (uploadedFile.file && progress >= 99) {\r\n            // setTimeout is used to fadeout the progress bar and to fade-in the final links\r\n            window.setTimeout(() => {\r\n                setDisplayProgress(false); // stop displaying the progress bar\r\n                setProgress(0); // set the width of the progress bar to 0\r\n                setDisplayLinks(true); // display the final links to download the file/copy th shareable link to clipboard\r\n\r\n                // Give time for the CSS transition to occur\r\n                window.setTimeout(() => {\r\n                    finalLinkRef.current.style.opacity = \"1\";\r\n                }, 100);\r\n            }, 1000);\r\n        }\r\n        // In case the progress bar is about to reach 100%, but the file upload hasn't been completed successfuly yet\r\n        // then keep the progress bar at 99%, as long as the uploadedFile object has a 'file' key that holds the correct data for the uploaded file\r\n        else if (progress !== 0 && !uploadedFile.file) setProgress(99);\r\n    }, [progress, displayProgress, uploadedFile]);\r\n\r\n    // useEffect to handle the style changes to the drag-and-drop section, upon file being being selected using it\r\n    useEffect(() => {\r\n        // Do not execute this on first render\r\n        if (firstRender.current) {\r\n            firstRender.current = false;\r\n            return;\r\n        } else {\r\n            // if the file selected is an image, then display its preview\r\n            if (isPreviewAvailable && previewSrc) {\r\n                previewImgRef.current.style.opacity = \"1\";\r\n            }\r\n            // if the file selected is not an image, then keep the height of the drag-and-drop section to be 50vh itself\r\n            if (!isPreviewAvailable && file.name)\r\n                dropRef.current.style.minHeight = \"50vh\";\r\n            // if the file selected is an image, then reduce height of the drag-and-drop section to be 25vh\r\n            else if (isPreviewAvailable && file.name)\r\n                dropRef.current.style.minHeight = \"25vh\";\r\n\r\n            // remove any extra styles added to it during drag event\r\n            dropRef.current.style.border = \"2px dashed #08a1c4\";\r\n            dropRef.current.style.background = \"\";\r\n            dropRef.current.style.color = \"\";\r\n        }\r\n    }, [isPreviewAvailable, previewSrc, file]);\r\n\r\n    // useEffect to handle when the submit button is displayed\r\n    useEffect(() => {\r\n        // If a file has been selected using the drag-and-drop component, then display the submit button\r\n        if (file.name) {\r\n            setErrorMsg(\"\"); // if file is a valid mimetype, then remove any error messages displayed with a previous file selection of an unsupported mime type\r\n            if (submitBtn.current) {\r\n                submitBtn.current.style.visibility = \"visible\";\r\n                submitBtn.current.style.opacity = \"1\";\r\n            }\r\n        }\r\n    }, [file]);\r\n\r\n    // function to update the style of the drag-and-drop component on mouseover and mouseleave\r\n    const updateBorder = (dragState) => {\r\n        // If the user hovers over the section, to drop a file, make the following changes to the style\r\n        if (dragState === \"over\") {\r\n            dropRef.current.style.border = \"2px solid #02B875\";\r\n            dropRef.current.style.background =\r\n                \"linear-gradient(315deg, #08a1c4 0%, #08cfbe 40%, #02b875 100%)\";\r\n            dropRef.current.style.color = \"white\";\r\n        }\r\n        // Once the file has been dropped, and the cursor leaves the drop-section, then remove the style changes made in the previous block\r\n        else if (dragState === \"leave\") {\r\n            dropRef.current.style.border = \"2px dashed #08a1c4\";\r\n            dropRef.current.style.background = \"\";\r\n            dropRef.current.style.color = \"\";\r\n        }\r\n    };\r\n\r\n    // function to handle file selection using the drag-and-drop section\r\n    const handleFile = (files) => {\r\n        // fetch the file to be uploaded, from the argument 'files' and set it to the correct state variable\r\n        const [uploadedFile] = files;\r\n        setFile(uploadedFile);\r\n        setDisplayLinks(false); // do not display the final links yet. Useful when user attempts consecutive file uploads\r\n\r\n        // set the preview image if the file type is an image type\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewSrc(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(uploadedFile);\r\n\r\n        setIsPreviewAvailable(\r\n            uploadedFile.name.match(/\\.(jpeg|jpg|png|webp|gif|svg)$/)\r\n        );\r\n    };\r\n\r\n    // function to handle events after the link to share the file, is clicked\r\n    const handleBtnClick = (e) => {\r\n        // change the background style and color of the button\r\n        shareBtnRef.current.style.background =\r\n            \"linear-gradient(315deg, #08a1c4 0%, #08cfbe 40%, rgb(2, 184, 117, 0.9) 100%)\";\r\n        shareBtnRef.current.style.color = \"white\";\r\n\r\n        // to make it seem as though there was a click of the button, remove additional styles for 200ms\r\n        window.setTimeout(() => {\r\n            shareBtnRef.current.style.background = \"\";\r\n            shareBtnRef.current.style.color = \"\";\r\n        }, 200);\r\n\r\n        // copy the correct shareable link to the clipboard\r\n        navigator.clipboard.writeText(\r\n            `${frontURL || baseURL}/download/${uploadedFile.file._id}`\r\n        );\r\n\r\n        // Display the tool tip that says 'link copied'\r\n        const toolTip = document.querySelector(\r\n            \"button.share-link .tooltiptext\"\r\n        );\r\n        toolTip.style.visibility = \"visible\";\r\n        toolTip.style.opacity = \"1\";\r\n\r\n        // remove the tooltip from DOM after 5s\r\n        window.setTimeout(() => {\r\n            toolTip.style.visibility = \"hidden\";\r\n            toolTip.style.opacity = \"0\";\r\n        }, 5000);\r\n    };\r\n\r\n    // function to handle file submit\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // stop displaying the submit button\r\n        submitBtn.current.style.opacity = \"0\";\r\n\r\n        // if the valid filetype has been selected and set as the state var\r\n        if (file) {\r\n            // create a new FormData and append the file with the key 'file', as this is the key that multer has been configured to look for\r\n            const formdata = new FormData();\r\n            formdata.append(\"file\", file);\r\n\r\n            // Wait for CSS transition to occur before displaying the progrss bar\r\n            window.setTimeout(() => {\r\n                setDisplayProgress(true);\r\n            }, 500);\r\n\r\n            // make POST request to the server API with the headers needed to work with files/form-data\r\n            axios\r\n                .post(`${baseURL}/api/file/`, formdata, {\r\n                    headers: {\r\n                        \"Content-Type\": \"multipart/form-data\",\r\n                    },\r\n                })\r\n                .then((file) => {\r\n                    // Once the POST request occurs succesfully, the returned object includes the File object stored in the DB\r\n                    setErrorMsg(\"\"); // remove any error messages\r\n                    submitBtn.current.style.visibility = \"hidden\";\r\n\r\n                    // Make GET request to obtain the data for the buffer array of the required file\r\n                    axios\r\n                        .get(`${baseURL}/api/file/${file.data._id}`)\r\n                        .then((uploadedFile) => {\r\n                            setDisplayLinks(true); // once the file data is obtained, display the final links\r\n                            setUploadedFile(uploadedFile.data);\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n                })\r\n                .catch((err) => {\r\n                    // In case there was an error but no response is sent from the server API, it means there was an internet issue\r\n                    if (!err.response) {\r\n                        setErrorMsg(\r\n                            \"Please connect to the internet and try again.\"\r\n                        );\r\n                    }\r\n                    // Check the error response and set the appropriate error message to be displayed to the user\r\n                    else {\r\n                        const offlineError =\r\n                            \"Error: MongooseServerSelectionError: Could not connect to any servers in your MongoDB Atlas cluster. One common reason is that you're trying to access the database from an IP that isn't whitelisted. Make sure your current IP address is on your Atlas cluster's IP whitelist: https://docs.atlas.mongodb.com/security-whitelist/\";\r\n                        const fileSizeError = \"File too large\";\r\n                        if (err.response.data === offlineError)\r\n                            setErrorMsg(\r\n                                \"Please connect to the internet and retry.\"\r\n                            );\r\n                        else if (err.response.data === fileSizeError)\r\n                            setErrorMsg(\r\n                                \"File is too large. Please choose a file of size < 1 MB.\"\r\n                            );\r\n                        else setErrorMsg(err.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            setErrorMsg(\"Please Select a File.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section ref={homeRef} className=\"home\">\r\n            {/* display any error message if it's there */}\r\n            <p className=\"error-msg\">{errorMsg}</p>\r\n\r\n            {/* the drag-and-drop section */}\r\n            <form className=\"file-form\" onSubmit={handleSubmit}>\r\n                <section className=\"file-upload\">\r\n                    <Dropzone\r\n                        onDrop={handleFile}\r\n                        className=\"drop-file\"\r\n                        // update the style of the section on file selection\r\n                        onDragEnter={() => updateBorder(\"over\")}\r\n                        onDragLeave={() => updateBorder(\"leave\")}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div\r\n                                {...getRootProps({ className: \"drop-zone\" })}\r\n                                ref={dropRef}>\r\n                                <input {...getInputProps()} />\r\n                                <p>\r\n                                    Drag and Drop a File <br />\r\n                                    or <br />\r\n                                    Click Here to Select a File\r\n                                </p>\r\n\r\n                                {/* display the name of the selected file */}\r\n                                {file.name ? (\r\n                                    <div className=\"file-name\">\r\n                                        <strong style={{ fontWeight: \"700\" }}>\r\n                                            Selected file:\r\n                                        </strong>{\" \"}\r\n                                        {file.name}\r\n                                    </div>\r\n                                ) : (\r\n                                    \"\"\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    {/* display any preview image or a message to say image preview isn't available */}\r\n                    <div className=\"image-preview-message\">\r\n                        {previewSrc ? (\r\n                            isPreviewAvailable ? (\r\n                                <div className=\"image-preview\">\r\n                                    <img\r\n                                        ref={previewImgRef}\r\n                                        className=\"preview-image\"\r\n                                        src={previewSrc}\r\n                                        alt=\"Preview\"\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"preview-message\">\r\n                                    <p>No preview available for this file</p>\r\n                                </div>\r\n                            )\r\n                        ) : (\r\n                            <div className=\"preview-message\">\r\n                                <p>\r\n                                    Image preview will be shown here after\r\n                                    selection\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* display the progress bar */}\r\n                    {progress > 0 ? (\r\n                        <div className=\"progress\">\r\n                            <div\r\n                                className=\"determinate\"\r\n                                style={{ width: `${progress}%` }}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </section>\r\n\r\n                {/* display the submit button after file selection */}\r\n                {file.name && !displayLinks ? (\r\n                    <button\r\n                        ref={submitBtn}\r\n                        className=\"submit-btn\"\r\n                        type=\"submit\">\r\n                        <span></span>\r\n                        Submit\r\n                        <img className=\"submit-icon\" src={logo} alt=\"logo\" />\r\n                        <span></span>\r\n                    </button>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </form>\r\n\r\n            {/* display the links to download the file/ copy link for sharing the file, after successful file upload */}\r\n            {displayLinks ? (\r\n                <div className=\"final-links\" ref={finalLinkRef}>\r\n                    {/* onclicking the download button, use the dowbloadjs function to trigger the file download */}\r\n                    <button\r\n                        className=\"link\"\r\n                        onClick={() =>\r\n                            download(\r\n                                Uint8Array.from(uploadedFile.data.Body.data) // converting the buffer array to a uint8array, to be compliant with the downloadjs function requirement\r\n                                    .buffer,\r\n                                uploadedFile.file.file_name,\r\n                                uploadedFile.file.file_mimetype\r\n                            )\r\n                        }>\r\n                        Download File\r\n                        <i className=\"material-icons\">file_download</i>\r\n                    </button>\r\n\r\n                    {/* copy link to clipboard once this link is clicked */}\r\n                    <button\r\n                        className=\"share-link link\"\r\n                        onClick={handleBtnClick}\r\n                        ref={shareBtnRef}\r\n                        aria-label=\"Click to copy link\">\r\n                        <span></span> Share File\r\n                        <i className=\"material-icons\">share</i>\r\n                        <span className=\"tooltiptext\">Link Copied!</span>\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport download from \"downloadjs\"; // package to trigger file downloads on the clientside\r\nimport \"../stylesheets/download.css\";\r\n\r\n// configure the baseURL to be either the localhost or the deployed URL\r\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\r\nlet frontURL = \"\";\r\nif (baseURL === \"http://localhost:5000\") {\r\n    frontURL = \"http://localhost:3000\";\r\n}\r\n\r\n// component to handle file downloads after user clicks on the shareable link\r\nconst Download = (props) => {\r\n    // trigger the file download after the component has mounted\r\n    useEffect(() => {\r\n        // fetch the _id of the File(from DB) from the params\r\n        const id = props.match.params.id;\r\n\r\n        // Get the data for the correct file object using the id\r\n        axios\r\n            .get(`${baseURL}/api/file/${id}`)\r\n            .then((file) => {\r\n                const downloadFile = file.data; // the buffer array that holds the content of the file\r\n\r\n                // invoke the download function to download the file\r\n                download(\r\n                    Uint8Array.from(downloadFile.data.Body.data).buffer, // convert the buffer array to uint8array, to be compliant with the downloadjs function property type\r\n                    downloadFile.file.file_name, // name of the file to be downloaded, is set to the original file name stored in the DB\r\n                    downloadFile.file.file_mimetype // the valid mime type of the file to be downloaded\r\n                );\r\n            })\r\n            .then(() =>\r\n                // wait for a second to finish file download, and then redirect to the home page of the application\r\n                window.setTimeout(() => {\r\n                    window.location.replace(frontURL || baseURL);\r\n                }, 1000)\r\n            )\r\n            .catch((err) => {\r\n                if (err.message) {\r\n                    alert(\"No such file is available in the server!\");\r\n                    window.location.replace(baseURL || frontURL);\r\n                } else {\r\n                    console.log(JSON.stringify(err));\r\n                }\r\n            });\r\n    }, []);\r\n    return <p className=\"prompt\">Downloading the file...</p>; // display a message while the file download starts\r\n};\r\n\r\nexport default Download;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../stylesheets/navbar.css\";\r\nimport logo from \"../stylesheets/logo.png\";\r\n\r\n// Navbar component\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"nav-brand\">\r\n                <Link to=\"/\">\r\n                    EasyShare\r\n                    <img className=\"logo\" src={logo} alt=\"Logo\"></img>\r\n                </Link>\r\n            </div>\r\n            <ul className=\"nav-ul\">\r\n                <li className=\"nav-li\">\r\n                    <Link className=\"about\" to=\"/about\">\r\n                        About\r\n                    </Link>\r\n                </li>\r\n                {/* <li className=\"nav-li\">\r\n                    <Link className=\"about\" to=\"/help\">\r\n                        Help\r\n                    </Link>\r\n                </li> */}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../stylesheets/footer.css\";\r\n\r\n// component to display footer\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"name\">\r\n                <span style={{ fontWeight: \"500\" }}>Built By</span> Rajat\r\n            </div>\r\n            <div className=\"icons\">\r\n                <a\r\n                    href=\"https://dev.to/rajatm544\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer noopener\"\r\n                    aria-label=\"Link to Dev.to Profile\"\r\n                    title=\"Dev.to\">\r\n                    <i className=\"lni lni-dev\"></i>\r\n                </a>\r\n                <a\r\n                    href=\"https://github.com/Rajatm544\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer noopener\"\r\n                    aria-label=\"Link to Github Profile\"\r\n                    title=\"Github\">\r\n                    <i className=\"lni lni-github-original\"></i>\r\n                </a>\r\n                <a\r\n                    href=\"https://www.linkedin.com/in/rajat--m/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer noopener\"\r\n                    aria-label=\"Link to Linkedin Profile\"\r\n                    title=\"LinkedIn\">\r\n                    <i className=\"lni lni-linkedin-original\"></i>\r\n                </a>\r\n                <a\r\n                    href=\"https://medium.com/@rajat_m\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer noopener\"\r\n                    aria-label=\"Link to Medium Profile\"\r\n                    title=\"Medium\">\r\n                    <i className=\"lni lni-medium\"></i>\r\n                </a>\r\n                <a\r\n                    href=\"https://twitter.com/Rajat__m\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer noopener\"\r\n                    aria-label=\"Link to Twitter Profile\"\r\n                    title=\"Twitter\">\r\n                    <i className=\"lni lni-twitter-original\"></i>\r\n                </a>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/error-404.4d6742fd.svg\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport error404 from \"../stylesheets/error-404.svg\";\r\nimport \"../stylesheets/notFound.css\";\r\n\r\n// 404-error page component\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"error-page\">\r\n            <img className=\"err-404\" src={error404} alt=\"404\" />\r\n            <div className=\"error-text\">\r\n                <p className=\"not-found\">Page Not Found.</p>\r\n                <p className=\"not-found\">\r\n                    Looks Like You've Landed on The Wrong Page!\r\n                </p>\r\n                <p className=\"not-found\">\r\n                    Click\r\n                    <Link className=\"link-home\" to=\"/\">\r\n                        {\" \"}\r\n                        Here{\" \"}\r\n                    </Link>\r\n                    to Go to The Home Page.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"../stylesheets/about.css\";\r\n\r\n// component to act as the About page\r\nconst About = () => {\r\n    return (\r\n        <div className=\"about\">\r\n            <h1 className=\"about-heading\">\r\n                About EasyShare.\r\n                <hr className=\"about-hr\" />\r\n            </h1>\r\n            <section className=\"main-text\">\r\n                <div className=\"about-text\">\r\n                    <p className=\"about-p\">\r\n                        This is an application to help share files with ease.\r\n                    </p>\r\n\r\n                    <p className=\"about-p\">\r\n                        Just drag and drop any file or choose any file from your\r\n                        system. Once the file is uploaded, you can either\r\n                        download the file from that page or you can also get a\r\n                        link to share the file.\r\n                    </p>\r\n                    <p className=\"about-p\">\r\n                        The supported file formats are:{\" \"}\r\n                        <span className=\"file-type\">png</span>,{\" \"}\r\n                        <span className=\"file-type\">jpg</span>,{\" \"}\r\n                        <span className=\"file-type\">jpeg</span>,{\" \"}\r\n                        <span className=\"file-type\">webp</span>,{\" \"}\r\n                        <span className=\"file-type\">svg</span>,{\" \"}\r\n                        <span className=\"file-type\">gif</span>,{\" \"}\r\n                        <span className=\"file-type\">doc</span>,{\" \"}\r\n                        <span className=\"file-type\">docx</span>,{\" \"}\r\n                        <span className=\"file-type\">pdf</span>,{\" \"}\r\n                        <span className=\"file-type\">ppt</span>,{\" \"}\r\n                        <span className=\"file-type\">pptx</span>,{\" \"}\r\n                        <span className=\"file-type\">xls</span>,{\" \"}\r\n                        <span className=\"file-type\">xlsx</span>. The shareable\r\n                        link is valid for 15 days, after which you will have to\r\n                        re-upload the required file.\r\n                    </p>\r\n                    <p className=\"about-p\">\r\n                        In case of any issues with the app, contact the\r\n                        developer using the links in the footer or by dropping a\r\n                        mail to{\" \"}\r\n                        <a\r\n                            href=\"mailto:rajatm544@gmail.com\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer noopener\">\r\n                            <span className=\"file-type\">this email-id</span>\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n                <i className=\"lni lni-question-circle\"></i>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"; // React Router\n\n// import all the required components\nimport Home from \"./components/Home\";\nimport Download from \"./components/Download\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport NotFound from \"./components/NotFound\";\nimport About from \"./components/About\";\nimport \"./App.css\";\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <Router>\n                <Navbar />\n                <Switch>\n                    {/* Home page component */}\n                    <Route path=\"/\" exact component={Home} />\n                    {/* The donwload page needs to have the id of the file to be downloaded in its params */}\n                    <Route path=\"/download/:id\" exact component={Download} />\n                    {/* The about page */}\n                    <Route path=\"/about\" exact component={About} />\n                    {/* A catch-all page to display 404-error */}\n                    <Route component={NotFound} />\n                </Switch>\n            </Router>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n// wait 1.5s before mounting App to the DOM\r\nwindow.setTimeout(() => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>,\r\n        document.getElementById(\"root\")\r\n    );\r\n}, 1500);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\n// serviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}